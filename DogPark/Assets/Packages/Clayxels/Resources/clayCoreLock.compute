#pragma kernel computeGrid
#pragma kernel cacheDistField
#pragma kernel clearCachedDistField
#pragma kernel generatePointCloud
#pragma kernel debugDisplayGridPoints
#pragma kernel computeGridForMesh
#pragma kernel computeMesh
#pragma kernel filterSolidsPerChunk
#include"claySDF.compute"
RWStructuredBuffer<int> indirectChunkArgs1,indirectChunkArgs2;RWStructuredBuffer<float3> gridData;RWStructuredBuffer<int2> pointCloudData;RWStructuredBuffer<int> pointCloudDataToSolidId;StructuredBuffer<int> triangleConnectionTable;RWStructuredBuffer<int> indirectDrawArgs,numSolidsPerChunk,updateChunks,solidsPerChunk,prefilteredSolidIds,solidsFilter;RWStructuredBuffer<float> fieldCache1;RWStructuredBuffer<uint> fieldCache2;
#if DRAW_DEBUG
RWStructuredBuffer<float3> debugGridOutPoints;
#endif
StructuredBuffer<float3> solidsPos;StructuredBuffer<float4> solidsRot;StructuredBuffer<float3> solidsScale;StructuredBuffer<float> solidsBlend;StructuredBuffer<int> solidsType;StructuredBuffer<float3> solidsColor;StructuredBuffer<float4> solidsAttrs;StructuredBuffer<int> solidsClayObjectId,solidsUpdated;RWStructuredBuffer<int3> meshOutIndices;RWStructuredBuffer<float3> meshOutPoints;RWStructuredBuffer<float4> meshOutColors;uint maxSolids=0,maxSolidsPerVoxel=0,maxSolidsPerVoxelMask=0,chunkId=0,numSolids=0,numSolidsBlending=0;float chunkSize=20.;float3 chunkCenter=float3(0.,0.,0.);int numChunksX=0,numChunksY=0,numChunksZ=0,fieldCacheSize1=0,fieldCacheSize2=0,outMeshIndexOffset=0;float solidsMaxInfluence=0.;uint numSolidsUpdated=0;int storeSolidId=0,chunkMaxOutPoints=0;static const int3 localGridCellCoords[8]={int3(0,0,0),int3(1,0,0),int3(1,1,0),int3(0,1,0),int3(0,0,1),int3(1,0,1),int3(1,1,1),int3(0,1,1)};static const float3 vertexOffset[8]={float3(0,0,0),float3(1,0,0),float3(1,1,0),float3(0,1,0),float3(0,0,1),float3(1,0,1),float3(1,1,1),float3(0,1,1)};static const int2 edgeConnection[12]={int2(0,1),int2(1,2),int2(2,3),int2(3,0),int2(4,5),int2(5,6),int2(6,7),int2(7,4),int2(0,4),int2(1,5),int2(2,6),int2(3,7)};static const float3 edgeDirection[12]={float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(1.f,0.f,0.f),float3(0.f,1.f,0.f),float3(-1.f,0.f,0.f),float3(0.f,-1.f,0.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f),float3(0.f,0.f,1.f)},cardinalCellOffset[8]={float3(-1,-1,-1),float3(1,-1,-1),float3(1,1,-1),float3(-1,1,-1),float3(-1,-1,1),float3(1,-1,1),float3(1,1,1),float3(-1,1,1)};static const int cubeEdgeFlags[]={0,265,515,778,1030,1295,1541,1804,2060,2309,2575,2822,3082,3331,3593,3840,400,153,915,666,1430,1183,1941,1692,2460,2197,2975,2710,3482,3219,3993,3728,560,825,51,314,1590,1855,1077,1340,2620,2869,2111,2358,3642,3891,3129,3376,928,681,419,170,1958,1711,1445,1196,2988,2725,2479,2214,4010,3747,3497,3232,1120,1385,1635,1898,102,367,613,876,3180,3429,3695,3942,2154,2403,2665,2912,1520,1273,2035,1786,502,255,1013,764,3580,3317,4095,3830,2554,2291,3065,2800,1616,1881,1107,1370,598,863,85,348,3676,3925,3167,3414,2650,2899,2137,2384,1984,1737,1475,1226,966,719,453,204,4044,3781,3535,3270,3018,2755,2505,2240,2240,2505,2755,3018,3270,3535,3781,4044,204,453,719,966,1226,1475,1737,1984,2384,2137,2899,2650,3414,3167,3925,3676,348,85,863,598,1370,1107,1881,1616,2800,3065,2291,2554,3830,4095,3317,3580,764,1013,255,502,1786,2035,1273,1520,2912,2665,2403,2154,3942,3695,3429,3180,876,613,367,102,1898,1635,1385,1120,3232,3497,3747,4010,2214,2479,2725,2988,1196,1445,1711,1958,170,419,681,928,3376,3129,3891,3642,2358,2111,2869,2620,1340,1077,1855,1590,314,51,825,560,3728,3993,3219,3482,2710,2975,2197,2460,1692,1941,1183,1430,666,915,153,400,3840,3593,3331,3082,2822,2575,2309,2060,1804,1541,1295,1030,778,515,265,0};int f(int x,int f,int y,int c){return x+c*(f+c*y);}uint f(float3 i){uint t=uint(i.x*255)+uint(i.y*255)*256+uint(i.z*255)*256*256;return t;}uint f(uint f,uint x,uint y,uint z,uint t){uint s=(((f<<6|x)<<6|y)<<6|z)<<8|t;return s;}uint s(float f,float i,float y,float x){uint r=uint(round(f*63.)),u=uint(round(i*63.)),z=uint(round(y*63.)),t=uint((x+1.)*.5*16383.),s=((r<<6|u)<<6|z)<<14|t;return s;}float4 s(uint i){float f=float(i&16383)/16383*2.-1.;i>>=14;float y=float(i&63)/63;i>>=6;float x=float(i&63)/63,u=float(i>>6)/63;return float4(u,x,y,f);}float f(float f,float x,float i){float c=max(i-abs(f-x),0.);return min(f,x)-c*c*.25f/i;}float s(float f,float x,float i){float t=abs(i),c=max(t-abs(-f-x),0.);return max(-f,x)+c*c*.25/t;}bool f(uint e,uint f){uint c=f/32;int i=solidsFilter[e*maxSolidsPerVoxelMask+c],u=f-32*c;if(i>>u&1)return true;return true;}void s(uint e,uint f){uint c=f/32;int s=solidsFilter[e*maxSolidsPerVoxelMask+c],i=f-32*c;solidsFilter[e*maxSolidsPerVoxelMask+c]=s&~(1<<i);}bool c(int f){return f>>0&1;}float c(float3 i,float x,float m,uint t,uint y){float z;
#if CLAYXELS_CACHEON
z=fieldCache1[chunkId*fieldCacheSize1+y];
#else
z=1e+10;
#endif
int k=0;uint e=y*maxSolidsPerVoxel;for(uint r=0;r<t;++r){if(!f(y,r)){continue;}uint n=prefilteredSolidIds[e+r];float3 u=solidsScale[n];float M=(u.x+u.y+u.z)*.333333,g=solidsBlend[n]*M;float4 S=solidsAttrs[n];float d=computeClayDistanceFunction(solidsType[n],i,solidsPos[n],solidsRot[n],u,S,M);if(!c(S.w)){if(g==0.)z=min(d,z);else if(g>0.)z=f(d,z,g);else z=s(d,z,g);}if(d>m)s(y,r);m-=abs(g);}return z;}float c(float3 i,float y,out int x,out float3 u,uint t,uint r,uint z){float m;
#if CLAYXELS_CACHEON
float4 g=s(fieldCache2[chunkId*fieldCacheSize2+z]);m=g.w;u=g.xyz;
#else
m=1e+10;u=float3(1.,1.,1.);
#endif
uint e=r*maxSolidsPerVoxel;for(uint o=0;o<t;++o){if(!f(r,o)){continue;}uint n=prefilteredSolidIds[e+o];float3 M=solidsScale[n];float k=(M.x+M.y+M.z)*.333333,S=solidsBlend[n]*k;float3 d=solidsColor[n];float4 p=solidsAttrs[n];float D=computeClayDistanceFunction(solidsType[n],i,solidsPos[n],solidsRot[n],M,p,k);if(D<m)x=n;bool w=c(p.w);if(S==0.){float l=clamp((m-D)/(y*2.),0.,1.);u=lerp(u,d,l);if(!w)m=min(D,m);}else if(S>0.){float l=clamp(.5+.5*(D-m)/S,0.,1.);u=lerp(d,u,l);if(!w)m=f(D,m,S);}else{float l=clamp(.5+.5*(-D-m)/S,0.,1.);u=lerp(d,u,l);if(!w)m=s(D,m,S);if(l<.5)x=n;}}return m;}float3 r(uint i){int f=(i&255)>>0,u=(i&65280)>>8,M=(i&16711680)>>16;return float3(f/255.,u/255.,M/255.);}int3 t(uint i){int f=(i&255)>>0,u=(i&65280)>>8,z=(i&16711680)>>16;return int3(f,u,z);}bool d(int3 i){if(i.x<0)return true;if(i.x>255)return true;if(i.y<0)return true;if(i.y>255)return true;if(i.z<0)return true;if(i.z>255)return true;return false;}float n(int4 f){float t=0.;for(uint i=0;i<numSolids;++i)t+=abs(solidsBlend[i]);return t;}float3 c(int3 f,float i){float c=i*.5,x=chunkSize*.5;float3 t=float3(i*f.x-x,i*f.y-x,i*f.z-x)+c;return t;}void d(float3 f,float x,uint c,inout uint i,inout float m){uint t=numSolidsPerChunk[chunkId],e=c*maxSolidsPerVoxel,u=0;for(u=0;u<t;++u){uint n=solidsPerChunk[chunkId*maxSolids+u];float3 s=solidsScale[n],r=f;if(int(solidsAttrs[n].w)>>1&1)r.x=abs(r.x);float y=max(s.x,max(s.y,s.z))*1.732,M=length(solidsPos[n]-r)-y,g=(s.x+s.y+s.z)*.333333,z=g*2.;if(M<z){prefilteredSolidIds[e+i]=n;i+=1;m+=abs(solidsBlend[n])*g;if(i==maxSolidsPerVoxel){break;}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGrid(int3 i:SV_DispatchThreadID){float x=chunkSize/64;float3 s=c(i,x);int u=f(i.x,i.y,i.z,64);if(u==0)indirectDrawArgs[0]=0;uint y=0;float z=0.;d(s+chunkCenter,x*.5,u,y,z);float t=x*.25,S=t*.5,M=x*.5,r=chunkSize/256,o=chunkSize*.5;int e=u*maxSolidsPerVoxelMask;for(uint m=0;m<maxSolidsPerVoxelMask;++m)solidsFilter[e+m]=-1;float g=c(s+chunkCenter,x,z+x,y,u);for(uint n=0;n<8;++n){float3 k=s+t*cardinalCellOffset[n];for(uint l=0;l<8;++l){float3 D=k+S*cardinalCellOffset[l];int3 p=int3(round((D.x+o-S)/r),round((D.y+o-S)/r),round((D.z+o-S)/r));int w=f(p.x,p.y,p.z,256);gridData[w]=float3(0,0,0);if(abs(g)<x){int C=0;float3 v=float3(1.,1.,1.);float a=c(D+chunkCenter,S,C,v,y,u,w);if(abs(a)<M){int X=solidsClayObjectId[C]+1;gridData[w]=float3(a,f(v),X);}}}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void cacheDistField(int3 i:SV_DispatchThreadID){if(numSolidsPerChunk[chunkId]==0){return;}float x=chunkSize/64;float3 u=c(i,x);int y=f(i.x,i.y,i.z,64);uint z=0;float t=0.;d(u+chunkCenter,x*.5,y,z,t);float m=x*.25,S=m*.5,M=x*.5,r=chunkSize/256,o=chunkSize*.5;int e=y*maxSolidsPerVoxelMask;for(uint n=0;n<maxSolidsPerVoxelMask;++n)solidsFilter[e+n]=-1;float g=c(u+chunkCenter,x,t+x,z,y);fieldCache1[chunkId*fieldCacheSize1+y]=g;for(uint l=0;l<8;++l){float3 k=u+m*cardinalCellOffset[l];for(uint D=0;D<8;++D){float3 p=k+S*cardinalCellOffset[D];int3 v=int3(round((p.x+o-S)/r),round((p.y+o-S)/r),round((p.z+o-S)/r));int w=f(v.x,v.y,v.z,256);gridData[w]=float3(0,0,0);int C=0;float3 a=float3(1.,1.,1.);float X=c(p+chunkCenter,S,C,a,z,y,w);fieldCache2[chunkId*fieldCacheSize2+w]=s(a.x,a.y,a.z,clamp(X,-1.,1.));}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void clearCachedDistField(int3 i:SV_DispatchThreadID){float u=chunkSize/64;float3 t=c(i,u);int x=f(i.x,i.y,i.z,64);float m=u*.25,z=m*.5,M=u*.5,r=chunkSize/256,o=chunkSize*.5;fieldCache1[chunkId*fieldCacheSize1+x]=1.;float g=s(1.,1.,1.,1.);for(uint n=0;n<8;++n){float3 y=t+m*cardinalCellOffset[n];for(uint e=0;e<8;++e){float3 p=y+z*cardinalCellOffset[e];int3 d=int3(round((p.x+o-z)/r),round((p.y+o-z)/r),round((p.z+o-z)/r));int l=f(d.x,d.y,d.z,256);fieldCache2[chunkId*fieldCacheSize2+l]=g;}}}float d(float f,float c){float i=c-f,t=.5;if(i!=0.)t=f/i;return t;}float2 i(float2 f){float2 t=f.xy>=0.?1.:-1.,i=(1.-abs(f.yx))*t;return i;}float m(float2 i){int f=32;float c=floor(i.x*(f-1)),u=floor(i.y*(f-1)),t=c*f+u;return t;}float k(float3 f){f/=abs(f.x)+abs(f.y)+abs(f.z);f.xy=f.z>=0.?f.xy:i(f.xy);f.xy=f.xy*.5+.5;float t=m(f.xy);return t;}int c(uint f,uint x,uint y,uint t){int i=f<<24|x<<16|y<<8|t;return i;}float p(float3 i){float t=dot(round(i*255),float3(65536,256,1));return t;}groupshared int3 gs_pointCloudData[255];groupshared uint gs_numElements,gs_globalOffset;void i(int3 u,float x){int e=f(u.x,u.y,u.z,256);float3 s=gridData[e];if(s.z==0.){return;}float n[8];uint y=0;for(int m=0;m<8;++m){int3 M=u+localGridCellCoords[m];int z=f(M.x,M.y,M.z,256);float3 g=gridData[z];if(g.z==0.){return;}n[m]=g.x;if(g.x<=0.)y|=1<<m;}int r=cubeEdgeFlags[y];if(r==0){return;}int z=y*16,M=triangleConnectionTable[z+3];float g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);float3 S=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+4];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);float3 o=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+5];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);float3 D=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M],v=S+o+D,l=cross(D-S,o-S);if(dot(l,l)>0.){M=triangleConnectionTable[z];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);S=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+1];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);o=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+2];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);D=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];l+=cross(D-S,o-S);M=triangleConnectionTable[z+6];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);S=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+7];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);o=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+8];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);D=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];l+=cross(D-S,o-S);M=triangleConnectionTable[z+9];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);S=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+10];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);o=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];M=triangleConnectionTable[z+11];g=d(n[edgeConnection[M].x],n[edgeConnection[M].y]);D=vertexOffset[edgeConnection[M].x]-g*edgeDirection[M];l+=cross(D-S,o-S);l=normalize(l);v/=3;int p=s.y,w=s.z;float3 k=v-float3(.5,.5,.5);float a=dot(k,l);float3 R=l;R/=abs(R.x)+abs(R.y)+abs(R.z);R.xy=R.z>=0.?R.xy:i(R.xy);R.xy=R.xy*.5+.5;a=a*.5+.5;int3 C=t(p);int X=0;InterlockedAdd(gs_numElements,1,X);if(X<255)gs_pointCloudData[X]=int3(c(u.x,u.y,u.z,uint(round(R.x*255.))),f(uint(round(a*63.)),uint(round(C.x/256.*63.)),uint(round(C.y/256.*63.)),uint(round(C.z/256.*63.)),uint(round(R.y*255.))),w);}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void generatePointCloud(int3 f:SV_DispatchThreadID,uint M:SV_GroupIndex){if(M==0)gs_numElements=0,gs_globalOffset=0;GroupMemoryBarrierWithGroupSync();float u=chunkSize/256;i(f,u);GroupMemoryBarrierWithGroupSync();if(M==0)InterlockedAdd(indirectDrawArgs[0],gs_numElements*3,gs_globalOffset),gs_globalOffset/=3;GroupMemoryBarrierWithGroupSync();if(M<gs_numElements){int3 s=gs_pointCloudData[M];int c=gs_globalOffset+M;pointCloudData[c]=s.xy;if(storeSolidId==1)pointCloudDataToSolidId[chunkId*chunkMaxOutPoints+c]=s.z;}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void debugDisplayGridPoints(int3 i:SV_DispatchThreadID){
#if DRAW_DEBUG
int M=f(i.x,i.y,i.z,256);if(gridData[M].z!=0.){int e=debugGridOutPoints.IncrementCounter();float u=chunkSize/256;debugGridOutPoints[e]=c(i,u)+chunkCenter;}
#endif
}float4 g(uint i){int f=(i&255)>>0,u=(i&65280)>>8,M=(i&16711680)>>16;return float4(f/255.,u/255.,M/255.,1.);}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeGridForMesh(int3 i:SV_DispatchThreadID){float x=chunkSize/64;float3 s=c(i,x);int u=f(i.x,i.y,i.z,64);uint y=0;float z=0.;d(s+chunkCenter,x*.5,u,y,z);float t=x*.25,S=t*.5,M=x*.5,r=chunkSize/256,o=chunkSize*.5;int e=u*maxSolidsPerVoxelMask;for(uint m=0;m<maxSolidsPerVoxelMask;++m)solidsFilter[e+m]=-1;float g=c(s+chunkCenter,x,z+x,y,u);for(uint n=0;n<8;++n){float3 k=s+t*cardinalCellOffset[n];for(uint l=0;l<8;++l){float3 p=k+S*cardinalCellOffset[l];int3 D=int3(round((p.x+o-S)/r),round((p.y+o-S)/r),round((p.z+o-S)/r));int w=f(D.x,D.y,D.z,256);gridData[w]=float3(0,0,0);int C=0;float3 a=float3(1.,1.,1.);float v=c(p+chunkCenter,S,C,a,y,u,w);int X=solidsClayObjectId[C]+1;gridData[w]=float3(v,f(a),X);}}}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void x(int3 i:SV_DispatchThreadID){float t=chunkSize/256;int M=f(i.x,i.y,i.z,256);float3 s=gridData[M];if(s.z==0.){return;}float n[8];int e=0,u=0;for(int m=0;m<8;++m){int3 r=i+localGridCellCoords[m];if(r.x<0||r.y<0||r.z<0||r.x>255||r.y>255||r.z>255){return;}int x=f(r.x,r.y,r.z,256);float3 p=gridData[x];n[m]=p.x;if(p.z==0.){continue;}if(p.x<0.)e|=1<<m;}int r=cubeEdgeFlags[e];if(r<0){return;}float3 z=c(i,t),a[12];for(int x=0;x<12;++x){if((r&1<<x)!=0){float y=n[edgeConnection[x].x],S=n[edgeConnection[x].y],o=d(y,S);a[x]=z+(vertexOffset[edgeConnection[x].x]-o*edgeDirection[x])*t;}}int y=e*16;for(int o=0;o<5;++o){int l=3*o;if(triangleConnectionTable[y+l]>=0){uint k=meshOutIndices.IncrementCounter();for(int S=0;S<3;++S){int w=triangleConnectionTable[y+l+S],v=k*3+S,D=s.y;meshOutPoints[v]=a[w]+chunkCenter;meshOutColors[v]=g(D);meshOutIndices[k][2-S]=v+outMeshIndexOffset;}}}}float3 g(int3 i,out float3 m){float t=chunkSize/256;int M=f(i.x,i.y,i.z,256);float3 u=gridData[M];m=g(u.y).xyz;float s[8];int e=0,z=0;for(int x=0;x<8;++x){int3 r=i+localGridCellCoords[x];int n=f(r.x,r.y,r.z,256);float3 p=gridData[n];s[x]=p.x;if(p.z==0.){continue;}if(p.x<0.)e|=1<<x;}int r=cubeEdgeFlags[e];float3 y=c(i,t);int n=0;float3 k=float3(0,0,0);for(int S=0;S<12;++S){if((r&1<<S)!=0){float p=s[edgeConnection[S].x],o=s[edgeConnection[S].y],l=d(p,o);k+=y+(vertexOffset[edgeConnection[S].x]-l*edgeDirection[S])*t;n+=1;}}k/=n;return k;}[numthreads(MAXTHREADS,MAXTHREADS,MAXTHREADS)]void computeMesh(int3 i:SV_DispatchThreadID){if(i.x>253||i.y>253||i.z>253){return;}else if(i.x<1||i.y<1||i.z<1){return;}int M=f(i.x+1,i.y+1,i.z+1,256);float3 u=gridData[M],x,y,r,z,t=g(int3(i.x,i.y,i.z),x)+chunkCenter,s,m,S,c;int e=f(i.x,i.y+1,i.z+1,256);float3 p=gridData[e];if(sign(u.x)!=sign(p.x)){s=g(int3(i.x,i.y,i.z+1),y)+chunkCenter;m=g(int3(i.x,i.y+1,i.z+1),r)+chunkCenter;S=g(int3(i.x,i.y+1,i.z),z)+chunkCenter;if(u.x>p.x)c=S,S=s,s=c,c=z,z=y,y=c;uint n=meshOutIndices.IncrementCounter();int l=n*3;meshOutPoints[l]=t;meshOutIndices[n][0]=l+outMeshIndexOffset;meshOutColors[l]=float4(x,1);l=n*3+1;meshOutPoints[l]=s;meshOutIndices[n][1]=l+outMeshIndexOffset;meshOutColors[l]=float4(y,1);l=n*3+2;meshOutPoints[l]=m;meshOutIndices[n][2]=l+outMeshIndexOffset;meshOutColors[l]=float4(r,1);n=meshOutIndices.IncrementCounter();l=n*3;meshOutPoints[l]=t;meshOutIndices[n][0]=l+outMeshIndexOffset;meshOutColors[l]=float4(x,1);l=n*3+1;meshOutPoints[l]=m;meshOutIndices[n][1]=l+outMeshIndexOffset;meshOutColors[l]=float4(r,1);l=n*3+2;meshOutPoints[l]=S;meshOutIndices[n][2]=l+outMeshIndexOffset;meshOutColors[l]=float4(z,1);}e=f(i.x+1,i.y,i.z+1,256);p=gridData[e];if(sign(u.x)!=sign(p.x)){s=g(int3(i.x,i.y,i.z+1),y)+chunkCenter;m=g(int3(i.x+1,i.y,i.z+1),r)+chunkCenter;S=g(int3(i.x+1,i.y,i.z),z)+chunkCenter;if(u.x<p.x)c=S,S=s,s=c,c=z,z=y,y=c;uint n=meshOutIndices.IncrementCounter();int l=n*3;meshOutPoints[l]=t;meshOutIndices[n][0]=l+outMeshIndexOffset;meshOutColors[l]=float4(x,1);l=n*3+1;meshOutPoints[l]=s;meshOutIndices[n][1]=l+outMeshIndexOffset;meshOutColors[l]=float4(y,1);l=n*3+2;meshOutPoints[l]=m;meshOutIndices[n][2]=l+outMeshIndexOffset;meshOutColors[l]=float4(r,1);n=meshOutIndices.IncrementCounter();l=n*3;meshOutPoints[l]=t;meshOutIndices[n][0]=l+outMeshIndexOffset;meshOutColors[l]=float4(x,1);l=n*3+1;meshOutPoints[l]=m;meshOutIndices[n][1]=l+outMeshIndexOffset;meshOutColors[l]=float4(r,1);l=n*3+2;meshOutPoints[l]=S;meshOutIndices[n][2]=l+outMeshIndexOffset;meshOutColors[l]=float4(z,1);}e=f(i.x+1,i.y+1,i.z,256);p=gridData[e];if(sign(u.x)!=sign(p.x)){s=g(int3(i.x,i.y+1,i.z),y)+chunkCenter;m=g(int3(i.x+1,i.y+1,i.z),r)+chunkCenter;S=g(int3(i.x+1,i.y,i.z),z)+chunkCenter;if(u.x>p.x)c=S,S=s,s=c,c=z,z=y,y=c;uint n=meshOutIndices.IncrementCounter();int l=n*3;meshOutPoints[l]=t;meshOutIndices[n][0]=l+outMeshIndexOffset;meshOutColors[l]=float4(x,1);l=n*3+1;meshOutPoints[l]=s;meshOutIndices[n][1]=l+outMeshIndexOffset;meshOutColors[l]=float4(y,1);l=n*3+2;meshOutPoints[l]=m;meshOutIndices[n][2]=l+outMeshIndexOffset;meshOutColors[l]=float4(r,1);n=meshOutIndices.IncrementCounter();l=n*3;meshOutPoints[l]=t;meshOutIndices[n][0]=l+outMeshIndexOffset;meshOutColors[l]=float4(x,1);l=n*3+1;meshOutPoints[l]=m;meshOutIndices[n][1]=l+outMeshIndexOffset;meshOutColors[l]=float4(r,1);l=n*3+2;meshOutPoints[l]=S;meshOutIndices[n][2]=l+outMeshIndexOffset;meshOutColors[l]=float4(z,1);}}[numthreads(1,1,1)]void filterSolidsPerChunk(int3 i:SV_DispatchThreadID){int n=i.x+i.y*numChunksX+numChunksX*numChunksY*i.z;float x=chunkSize/256.f,u=chunkSize-x,z=chunkSize*.5;float3 t=float3(-(chunkSize*numChunksX*.5)+z+u*i.x,-(chunkSize*numChunksY*.5)+z+u*i.y,-(chunkSize*numChunksZ*.5)+z+u*i.z);float f=chunkSize*1.732*.5;int l=n*3,r=0;r=updateChunks[n]-1;int m=0;for(uint M=0;M<numSolids;++M){float3 s=solidsScale[M];float g=max(s.x,max(s.y,s.z))*1.732;float3 p=t;if(checkMirrorX(solidsAttrs[M].w))p.x=abs(p.x);float3 c=solidsPos[M];float y=length(c-p)-g;if(y<f){solidsPerChunk[n*maxSolids+m]=M;m+=1;if(r<=0){for(uint e=0;e<numSolidsUpdated;++e){uint D=solidsUpdated[e];if(D==M){r=1;break;}}}}}numSolidsPerChunk[n]=m;uint s=0,c=0;if(r>-1)s=64/MAXTHREADS,c=256/MAXTHREADS;updateChunks[n]=r;indirectChunkArgs1[l]=s;indirectChunkArgs1[l+1]=s;indirectChunkArgs1[l+2]=s;indirectChunkArgs2[l]=c;indirectChunkArgs2[l+1]=c;indirectChunkArgs2[l+2]=c;}